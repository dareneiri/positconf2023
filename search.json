[
  {
    "objectID": "source_files/StartHere.html",
    "href": "source_files/StartHere.html",
    "title": "Start Here",
    "section": "",
    "text": "Purpose\nI wrote this document to provide in-depth information for a five-minute lighting talk I gave at the Posit::Conf(2023) conference in Chicago, IL (September 19, 2023).\nView the presentation slides\nWith only five minutes to talk about logging, there is so much more information I wanted to share that I just could not get to. I hope others find this information helpful. This is knowledge I have gained through trial and error, and finding a solution that worked well for me. Maybe this information does not apply to you. And if you find the information not helpful or incorrect, then please let me know!\nThis documentation is also written from a perspective of having to service Shiny apps, Plumber APIs, and scheduled markdowns in a production environment, for business purposes. You may encounter advice in here that does not apply to you.\n\n\nSection Overview\nI have split up my content into separate sections for easier reading.\n\nIntroduction to Logging: I discuss what logging is, why it can be useful, and some examples that demonstrate its purpose\nLogging Packages: I review a few logging packages I have found helpful. It is not meant to review all types of logging packages available.\nLogging Levels: I dive into different logging levels, such as INFO, WARN, and ERROR, and how to strategically use them. I also discuss why you should not log everything, and how you need to be strategic in what you log.\nMaking Logs Accessible: I discuss how you can review your logs, either through writing to a local log file on your computer, or through cloud-based solutions. I focus on Azure.\nConfigure Sending Syslogs to Azure Monitor: This extends on the previous topic, along with instructions on setting up a Linux VM for pushing syslogs to Azure Monitor\nUsing API to Send Syslogs to Azure Monitor: This is an alternative approach to writing logs to syslog. If you’re using Docker to run your R code, then this may be a better solution.\nAdditional Resources\n\n\n\nAbout the Author\n\n\n\n\n\n\n\n\nDaren Eiri is Director of Data Science at National Programs, a Brown and Brown company (NYSE: BRO). Please visit my LinkedIn page to connect. I live in San Diego, California with my wife, daughter, dog, and cat.\nIn my spare time I volunteer with the San Diego County Search and Rescue team. We respond to lost and stranded people in the county — and sometimes outside the county – in urban and wildnerness environments."
  },
  {
    "objectID": "source_files/AzureMonitorSysLogConfiguration.html",
    "href": "source_files/AzureMonitorSysLogConfiguration.html",
    "title": "Sending Syslog to Azure Monitor",
    "section": "",
    "text": "We should now have an understanding of how we can use log4r to add logging in our code, as well as using an appender to write to a local file using file_appender or write to the system’s syslog with syslog_appender.\nBy writing to the syslog file, we can leverage cloud-based log aggregation tools to make the logs more accessible (via web browser) and set up alerts so you can receive an email or text message when a log entry pops up that you really care about (maybe a fatal() or error() message).\nIn this example, we’ll use Azure Log Analytics and Azure Monitor. Azure Monitor has several components to collect, route, store, and consume data.\nYou can sign up for a free trial on Azure, if needed.\nThis set up works well when you have your R script running in a Linux environment, and also works well when you have Posit Connect installed on a Linux virtual machine."
  },
  {
    "objectID": "source_files/AzureMonitorSysLogConfiguration.html#be-aware-of-legacy-log-analytics-agent",
    "href": "source_files/AzureMonitorSysLogConfiguration.html#be-aware-of-legacy-log-analytics-agent",
    "title": "Sending Syslog to Azure Monitor",
    "section": "Be aware of legacy Log Analytics Agent",
    "text": "Be aware of legacy Log Analytics Agent\nAs you go through Azure’s documentation, note that there are a few legacy agents floating around that you may come across. These legacy agents will be deprecated. Verify that you’re following documentation for Azure Monitor agent only, and not Azure Log Analytics agent, which is will be deprecated in August 2024. This is confusing because you still use Azure Log Analytics to view your logs in Azure Portal – Microsoft is simply deprecated the agent that is installed on the VM with the same name."
  },
  {
    "objectID": "source_files/UsingAzureLogAnalyticsAPI.html",
    "href": "source_files/UsingAzureLogAnalyticsAPI.html",
    "title": "Using The azlogr Package To Send Logs via API",
    "section": "",
    "text": "In the previous section we configured our code to log to a syslog_appender using the log4r package. There are some limitations in that it requires a certain type of infrastructure (Linux VM, capability to write to your systems syslog).\nIf you run into any IT restrictions, it can be easier to instead make an API call.\nThe package azlogr is a great option for sending your logs to your Azure Log Analytics Workspace. It is built on top of the logger package, so the examples below are not related to the log4r package. The concepts, however, are generally very similar.\n\nRequirements: Getting Azure Log Analytics Information\nTo send logs to Azure Log Analytics via API, you need some information to identify where to send the logs, and for authentication.\n\nAzure Log Analytics Customer/Workspace ID\n\nView Microsoft Documentation to find this Workspace ID\n\nAzure Log Analytics Shared Key\n\nSee this Microsoft thread for finding your shared Key.\n\n\n\n\nSet Up\nBecause you are using sensitive information, you should set up an .Renviron file to store your Workspace ID and Shared Key values. Read about using environment variables or storing secret values with the Posit Solutions Guide\nHere’s an example .Renviron file:\n\nAZ_LOG_ID=\"00000000-0000-0000-0000-000000000000\"\nAZ_LOG_KEY=\"5LLi6guNfYDFDSFDvx8ZeOAHlz7dX0hI9S5RTI6ISnGwa3aTvq/Mzg2SlwaaRqkZAAaSiYStlpx48y8zQ==\"\n# The above Key is not real, but is representative of what it should look like\n\nBe sure to also review azlogr’s vignette on How to Use azlogr\n\n\nUsing azlogr to send logs via API\n\n# Azure Log Analytics workspace id and shared key are fetched from Azure Portal\nAZ_LOG_ID = Sys.getenv(\"AZ_LOG_ID\")\nAZ_LOG_KEY = Sys.getenv(\"AZ_LOG_KEY\")\n\nlibrary(azlogr)\n\n\nset_log_config(\n  log_fields = c(\"level\", \"time\", \"msg\"),\n  log_type = \"custom_table_r\"\n)\n\n# Use logger_* functions with appropriate logging level to log.\n# If POST is successful, then it will be available in custom log table on\n# Azure Log Analytics, by default table name will be `log_from_r4`_CL (_CL is\n# added by Azure for any custom log table)\nlogger_info(\"log info sent to Azure\")\n\nYou can then view the results in Azure Monitor Logs. Note that it does take a few minutes for the log data to appear, so it is not instantaneous. See the time difference between time_s and TimeGenerated."
  },
  {
    "objectID": "source_files/AdditionalResources.html",
    "href": "source_files/AdditionalResources.html",
    "title": "Additional Resources",
    "section": "",
    "text": "I hope you found this information helpful, at least to get you started on your logging journey. In the future, I’d like to add greater detail to make this more useful. I am aware I glossed over a few details :)\nHere are a few additional things to consider when it comes to logging, that I found useful:\n\nThe problem with logging\n\nThere’s a balance to how much you should log\n\nThe Importance of Logging\n\nAnother programmer’s perspective on logging\n\nAdvanced R\n\nAs you include more logging into your code, hopefully you also include conditions (tryCatch()), to make your code more robust.\n\nKnown issues with RMarkdown and logger package using globalCallingHandlers\n\nSee Stackoverflow question as well"
  },
  {
    "objectID": "source_files/LoggingPackages.html",
    "href": "source_files/LoggingPackages.html",
    "title": "Logging Packages",
    "section": "",
    "text": "There are several package options for logging in R. In no particular order:\n\nlogger. Last CRAN update 2 years ago (as of 9/2023)\nlog4r. Hadley has added a few PRs and has particular interest into it since Aaron Jacobs is the maintainer and currently working at Posit\nfutile.logger. Have not fully explored. Still being maintained.\nazlogr. Extension of logger package, but conveniently sends logs to Azure Log Analytics Workspace via API, which can be useful.\npaws. Paws is a Package for Amazon Web Services in R. Convenient package for sending logs to Amazon CloudWatch\n\nIn the upcoming examples, I will be using log4r, simply because that is what I am primarily using today. When I examined different logging options, what attracted me to use log4r was the microbenchmark analysis done by the package developer of log4r, and log4r performed quite well when timing how long it took to print out messages:\nprint(info_bench, order = \"median\")\n#&gt; Unit: microseconds\n#&gt;           expr      min        lq       mean    median        uq       max\n#&gt;            cat   19.727   24.8665   29.67838   27.4510   30.4120  1059.446\n#&gt;          log4r   14.296   26.0990   38.78562   32.0350   38.8730  2111.388\n#&gt;           rlog   44.754   59.5615   67.99791   66.2240   73.0670   744.355\n#&gt;         logger  152.856  175.9850  196.45468  186.4345  200.5960  2265.367\n#&gt;        logging  195.847  222.2560  252.33351  233.1320  248.1000  5634.985\n#&gt;            lgr  371.837  402.0790  498.85653  415.8595  437.0245 25077.198\n#&gt;         loggit  514.625  551.1530  632.20753  567.2740  587.6315  3101.445\n#&gt;  futile.logger 1509.811 1593.7180 1680.18994 1626.2340 1662.5675  5869.816"
  },
  {
    "objectID": "source_files/LoggingLevels.html",
    "href": "source_files/LoggingLevels.html",
    "title": "Logging Levels",
    "section": "",
    "text": "Introduction\nWhen you start to use a proper logging package, you first need to understanding what logging levels are.\nLogging levels allow you to categorize the type of message you want to communicate. When we used the cat() function to print out different steps in our code, you cannot easily tell if what your message is communicating is just informational, a warning, or perhaps even a error message. It may be clear to you, but it also needs to be clear to anyone else that may be interacting with your code. And writing cat(\"INFO: An informational message\") is not very efficient.\nAnother drawback to using only cat() is that maybe you want control over what messages get printed out based on some minimum threshold. In other words, maybe you have several informational messages in your code, but you only really need to see that output when you’re developing, and not when you’ve pushed your code to production. Having to delete those messages is inconvenient in case you need them again.\nLogging levels allows you to:\n\nDefine the type of message\nDefine a threshold for what messages display and when.\n\nLet’s get into examples with log4r\n\nsuppressPackageStartupMessages(\n  library(log4r)\n)\n# We need to create a logger object. \n# By default, logs will print to console \n# and only show messages INFO and above\n\nlogger &lt;- logger()\n\nlog4r::debug(logger, \"This is a debug message\")\nlog4r::info(logger, \"This is an informational message\")\nlog4r::warn(logger, \"This is a warning message\")\nlog4r::error(logger, \"This is an error message\")\n\nINFO  [2023-09-22 15:48:52] This is an informational message\nWARN  [2023-09-22 15:48:52] This is a warning message\nERROR [2023-09-22 15:48:52] This is an error message\n\n\nSee how in the above example, we have four different logging levels (debug, info, warn, and error). Only three of them printed out something. That’s because our logger object was left to the default logger() object of INFO.\nLet’s define it to print DEBUG so we can get that first debug message printed out.\n\nlibrary(log4r)\n\nlogger &lt;- logger(threshold = \"DEBUG\")\n\nlog4r::debug(logger, \"This is a debug message\")\nlog4r::info(logger, \"This is a informational message\")\nlog4r::warn(logger, \"This is a warning message\")\nlog4r::error(logger, \"This is an error message\")\n\nDEBUG [2023-09-22 15:48:52] This is a debug message\nINFO  [2023-09-22 15:48:52] This is a informational message\nWARN  [2023-09-22 15:48:52] This is a warning message\nERROR [2023-09-22 15:48:52] This is an error message\n\n\n\n\nWhat Logging Levels Exist?\nWe’ve gotten into a few logging levels, but there are a few more to be aware of. And what do they mean anyways?\nA great resource to start off with is actually from the python logging package.. I’ve also included a few examples of my own below.\n\n\n\n\n\n\n\n\n\nLevel\nDescription\nExample\nCode Example\n\n\n\n\nDEBUG\nMessages that are helpful in providing an exceptional level of detail that you normally would not need to see, especially for debugging purposes\nPrinting out the output of something mid-way through a series of processing steps, just to check that things look right.\ndebug(logger, paste0(\"What my df looks like before processing: \", df))\n\n\nINFO\nDescribes steps or processes happening in your code\nIf you are connecting to a database, you may have a message saying “Connecting to external database”\ninfo(logger, \"Attempting to connect to database\")\n\n\nWARNING\nOutputs a message that is recoverable and does not affect the final output of your code\nMaybe a step involves changing the data type (numeric to character, for example), assuming it’s okay to change it. It shouldn’t cause problems, but you should let your user know.\nwarn(logger, \"Ambiguous date format. Assuming date format is mm-dd-yyyy.\")\n\n\nERROR\nSomething bad happened, but there is an alternative solution and is recoverable.\nYou attempt to connect to a database, but it failed, so it’s using a different backup database instead.\nerror(logger, \"Could not connect to database. Used secondary database connection instead.\")\n\n\nFATAL\nSomething bad happened, and it is not recoverable. The program must quit.\nYou cannot connect to any databases, and it’s required for your program to run, and there are no alternatives.\nfatal(logger, \"Could not establish connection to primary or secondary database. Stopping process.\")"
  },
  {
    "objectID": "source_files/Introduction.html",
    "href": "source_files/Introduction.html",
    "title": "Introduction to Logging",
    "section": "",
    "text": "Think of logging as information that is generated, and possibly stored, as a result of your code running.\nThis can be simple print() or cat() functions throughout your code to help indicate what sections are running. For example:\n\nprint(\"Starting to load data\")\n\n# Load data\n\nprint(\"Cleaning and Prepping data\")\n\n# Clean data\n\nprint(\"Create final df for analysis\")\n\n# Final DF \n\nLogging can also involve writing information to a database. Maybe you want to track all users who are visiting your Shiny app, or the inputs and outputs of your API. This is transactional logging information that can help you identify the on-going activity of your code and overall health."
  },
  {
    "objectID": "source_files/Introduction.html#debugging-and-troubleshooting",
    "href": "source_files/Introduction.html#debugging-and-troubleshooting",
    "title": "Introduction to Logging",
    "section": "Debugging and Troubleshooting",
    "text": "Debugging and Troubleshooting\nOne reason to use logging is that it helps with the debugging process. They act as trail markers for when things go wrong, so you have some general idea of what code ran successfully, and where to start troubleshooting code. This is especially true if your code is running in an non-interactive way, where you don’t have an IDE to set breakpoints in your code.\nFor example, you can have a very simple cat() statement while running a for loop:\n\nnumber_list &lt;- c(2, 3, 6, 0, 3, 2)\nfor (i in number_list) {\n  result &lt;- 5/i\n  \n  cat(\"Result: \", result, \"\\n\")\n}\n\nResult:  2.5 \nResult:  1.666667 \nResult:  0.8333333 \nResult:  Inf \nResult:  1.666667 \nResult:  2.5 \n\n\nWhat happened here? What caused the Inf value? Let’s add another cat() outputting what the value of i is for each iteration.\n\nnumber_list &lt;- c(2, 3, 6, 0, 3, 2)\nfor (i in number_list) {\n  cat(\"Dividing 5 by\", i, \"\\n\")\n  \n  result &lt;- 5/i\n  \n  cat(\"Result: \", result, \"\\n\")\n}\n\nDividing 5 by 2 \nResult:  2.5 \nDividing 5 by 3 \nResult:  1.666667 \nDividing 5 by 6 \nResult:  0.8333333 \nDividing 5 by 0 \nResult:  Inf \nDividing 5 by 3 \nResult:  1.666667 \nDividing 5 by 2 \nResult:  2.5 \n\n\nImagine if number_list was a random list of numbers. Having cat print out each value of i as the for loop ran is helpful to understand the result of Inf: because it was attempting to divide by zero."
  },
  {
    "objectID": "source_files/Introduction.html#performance-analysis",
    "href": "source_files/Introduction.html#performance-analysis",
    "title": "Introduction to Logging",
    "section": "Performance Analysis",
    "text": "Performance Analysis\nIt can also be useful to know and document the time it takes to run an analysis, especially if you have multiple steps involved and you want to monitor the time it takes to run Chunk A, Chunk B, Chunk C, etc.\nThere’s a few useful packages that help with this ({tictoc}, {microbenchmark}), but you can also use Sys.time.\n\n# start timer\n# Assume there's a lot of steps involving data processing for a large file\n# and you know the data size will grow over time. Perhaps it's something you want\n# to track. \n\nstart_time &lt;- Sys.time()\n\n# 1. load data\n\n# 2. clean and process\n\n# 3. output final dataframe\n\n# adding sleep for purpose of example\nSys.sleep(5)\n\nend_time &lt;- Sys.time()\n\ntime_elapsed &lt;- end_time - start_time\n\ncat(\"Total time elapsed: \", time_elapsed, \"seconds\")\n\nTotal time elapsed:  5.007689 seconds"
  },
  {
    "objectID": "source_files/Introduction.html#monitoring",
    "href": "source_files/Introduction.html#monitoring",
    "title": "Introduction to Logging",
    "section": "Monitoring",
    "text": "Monitoring\nFinally, logging is certainly useful in informing you the route being taken in your code. It’s especially helpful if you have if and else statements, or error handling with try and tryCatch.\nWith this example below, perhaps you only want data to be processed if it meets certain conditions. It would be nice to know you have some way of checking that, instead of relying on code blindly making the decision for you. Sometimes the code you write does not behave as intended!\n\n# generate 5 random numbers\n# Check if number if even or odd\n\nrand_int &lt;- sample(1:100, 5)\n\nfor (i in rand_int) {\n  print(paste0(\"The numerator value is \", i))\n  modulo_result &lt;- i%%2\n  if (modulo_result == 0) {\n    print(\"Divided an even number\") \n    # proceed to do some additional steps here\n    \n  } else \n    print(\"Divided by an odd number\")\n    # don't do anything else\n}\n\n[1] \"The numerator value is 17\"\n[1] \"Divided by an odd number\"\n[1] \"The numerator value is 22\"\n[1] \"Divided an even number\"\n[1] \"The numerator value is 93\"\n[1] \"Divided by an odd number\"\n[1] \"The numerator value is 39\"\n[1] \"Divided by an odd number\"\n[1] \"The numerator value is 34\"\n[1] \"Divided an even number\"\n\n\nLet’s do a tryCatch example as another illustration for logging.\n\nWe’ll take our variable i, and check if it’s even\n\nIf it’s even, then we’ll try to do log(i)\n\nIf i is odd, then don’t do anything else.\n\nWe should expect that when i is non-positive, there will be a warning, which should trigger additional messages.\n\nlog(-1)\n\nWarning in log(-1): NaNs produced\n\n\n[1] NaN\n\n\nLet’s run a full example.\n\nrand_int &lt;- sample(-2:1, 3)\n\nfor (i in rand_int) {\n  print(paste0(\"Starting loop. The value of i is \", i))\n  modulo_result &lt;- i%%2\n  if (modulo_result == 0) {\n    \n    print(\"Variable i is an EVEN number\") \n    # proceed to do some additional steps here\n    tryCatch(\n      #let's try to take the log  \n      print(paste(\"The log of i is: \", log(i)))\n      , warning = function(w) {\n        \n        #print error message\n        print(paste0(\"Uh oh. Something went wrong. Is i a negative number?:\", w))\n        \n        #do something else instead if warning is triggered\n      }\n    \n    )\n  } else \n    print(\"Variable i is an ODD number\")\n    # don't do anything else\n}\n\n[1] \"Starting loop. The value of i is 1\"\n[1] \"Variable i is an ODD number\"\n[1] \"Starting loop. The value of i is -2\"\n[1] \"Variable i is an EVEN number\"\n[1] \"Uh oh. Something went wrong. Is i a negative number?:simpleWarning in log(i): NaNs produced\\n\"\n[1] \"Starting loop. The value of i is -1\"\n[1] \"Variable i is an ODD number\"\n\n\nNow we’re starting to see the path the code is taking as the value of i changes for each iteration.\nIf we wanted to, we can also check for Inf values produced through log(0), which is a different result when you attempt to log a non-zero, non-positive value."
  },
  {
    "objectID": "source_files/MakeLogsAccessible.html",
    "href": "source_files/MakeLogsAccessible.html",
    "title": "Making Logs Accessible",
    "section": "",
    "text": "So far, we have discussed:\nNow, we will dive into looking at logs beyond your Console in the RStudio IDE. Logs are more useful when they’re accessible for review, whether that is in some local .log file, or if it’s stored in the cloud through a service like Azure Monitor or AWS CloudWatch. Both options are perfect solutions, depending on what you are looking for, and what resources you have available."
  },
  {
    "objectID": "source_files/MakeLogsAccessible.html#what-are-syslog-files",
    "href": "source_files/MakeLogsAccessible.html#what-are-syslog-files",
    "title": "Making Logs Accessible",
    "section": "What are syslog files?",
    "text": "What are syslog files?\nSyslog is a messaging protocol, and logging events from various software processes on the system will write to a syslog file, typically in /var/log/syslog on *nix-based systems.\nIf you have used Ubuntu or similar Linux OS, you should be able to find your syslog file. We will not cover Mac or Windows for now.\nSyslog is a convenient location to store logs because:\n\nIt’s a location where logs are already stored\nThere are solutions that leverage the syslog files that can enhance your logging capability (Azure Log Analytics, AWS CloudWatch)\n\nSo let’s dive into syslog_appender"
  },
  {
    "objectID": "source_files/MakeLogsAccessible.html#log4r-and-syslog_appender",
    "href": "source_files/MakeLogsAccessible.html#log4r-and-syslog_appender",
    "title": "Making Logs Accessible",
    "section": "log4r and syslog_appender",
    "text": "log4r and syslog_appender\nTo use syslog_appender, we first also need rsyslog. See the log4r vignette “Logging Beyond Local Files” for more information.\n\nsuppressPackageStartupMessages({\n  library(rsyslog)\n  library(log4r)\n})\n\nlogger &lt;- logger(appenders = syslog_appender(\"my-syslog-example\"))\n\nlog4r::info(logger, \"This is an informational message to be sent to syslog\")\n\nUsing the code above, you should see an entry in your syslog file. Here’s a Posit Community thread that gives an example of using log4r and writing to syslog."
  }
]